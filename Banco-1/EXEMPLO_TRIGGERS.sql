-- EXEMPLO 1 - TRIGGER -- disparada antes do insert da tabela cidade
CREATE OR REPLACE FUNCTION CODCIDADE() RETURNS TRIGGER AS $CODCIDADE$
BEGIN
	IF EXISTS(SELECT NOME FROM CIDADE WHERE NOME = NEW.NOME AND CODESTADO = NEW.CODESTADO) THEN
		RAISE EXCEPTION 'CIDADE JÁ CADASTRADA NESTE ESTADO';
	ELSE
		RETURN NEW;
	END IF;
END;
$CODCIDADE$ LANGUAGE plpgsql;

CREATE TRIGGER TG_CODIGOCIDADE BEFORE INSERT ON CIDADE
FOR EACH ROW EXECUTE PROCEDURE CODCIDADE();

-- testando a trigger
INSERT INTO CIDADE (NOME,CODESTADO) VALUES ('MARIÓPOLIS',1);

-- desabilitando trigger
ALTER TABLE CIDADE
DISABLE TRIGGER  TG_CODIGOCIDADE;

-- habilitando trigger
ALTER TABLE CIDADE
ENABLE TRIGGER  TG_CODIGOCIDADE;

-- EXEMPLO 2 - TRIGGER
CREATE OR REPLACE FUNCTION CODESTADO() RETURNS TRIGGER AS $CODESTADO$
BEGIN
	IF EXISTS(SELECT NOME FROM ESTADO WHERE NOME = NEW.NOME) THEN
		RAISE EXCEPTION 'ESTADO JÁ CADASTRADO';
	ELSE
		RETURN NEW;
	END IF;
END;
$CODESTADO$ LANGUAGE plpgsql;

CREATE TRIGGER TG_CODIGOESTADO BEFORE INSERT ON ESTADO
FOR EACH ROW EXECUTE PROCEDURE CODESTADO();

INSERT INTO ESTADO (NOME) VALUES ('RS');

--Exemplo 3
--Criar uma TRIGGER que evite que sejam inseridos novos clientes na tabela CLIENTES (banco de dados BANCOS)
--em que o campo codcidade seja igual a 1 ou 2. Essa TRIGGER será criada para a ação INSERT.
-- CRIAÇÃO DA TRIGGER 
CREATE OR REPLACE FUNCTION PERMITE_UF() RETURNS TRIGGER AS $PERMITE_UF$
BEGIN		
	IF (NEW.CODCIDADE = 1 OR NEW.CODCIDADE = 2) THEN
		RAISE EXCEPTION 'INSERÇÃO DE REGISTRO CANCELADA. ESTADO (UF) PROIBIDO!!!';
	ELSE
		RETURN NEW;
	END IF;
	
END;
$PERMITE_UF$ LANGUAGE plpgsql;

CREATE TRIGGER TG_PERMITE_UF BEFORE INSERT ON CLIENTES
FOR EACH ROW EXECUTE PROCEDURE PERMITE_UF();

-- TESTANDO O FUNCIONAMENTO DA TRIGGER
INSERT INTO CLIENTES (CPF,NOME,RUA,NUMERO,BAIRRO,COMPLEMENTO,CODCIDADE)
VALUES (25, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',1);

INSERT INTO CLIENTES (CPF,NOME,RUA,NUMERO,BAIRRO,COMPLEMENTO,CODCIDADE)
VALUES (91, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',3);
						  
-- Exemplo 4
--Vamos supor que, por ordem da administração não seja permitido fazer alterações e 
--inserções na tabela BANCOS. Para garantir esta norma implemente um trigger que 
--dispare em resposta a comandos UPDATE e INSERT na tabela BANCOS. Esta trigger 
--deve emitir um aviso de que as alterações e inserções foram suspensas e registrar 
--em uma tabela o nome do usuário que tentou fazer a alteração e o nome do BANCO 
--que tentou-se alterar ou inserir.

-- CRIAÇÃO DA TABELA PARA REGISTRAR TENTATIVAS DE INSERÇÃO E ALTERAÇÃO
CREATE TABLE TENTOU_ALTERAR
( 
  		BANCO VARCHAR (50) NOT NULL,
  		USUARIO VARCHAR (30) NOT NULL,
		OPERACAO CHAR(1) NOT NULL
);

-- CRIAÇÃO DA TRIGGER
CREATE OR REPLACE FUNCTION LOG_ALTERAINSERE_BANCOS() RETURNS TRIGGER AS $LOG_ALTERAINSERE_BANCOS$
-- VARIAVEL QUE SERÁ UTILIZADA NA TRIGGER
DECLARE VNOME_BANCO VARCHAR(50);
BEGIN
	-- VERIFICA SE FOI FEITA ALGUMA ALTERAÇÃO (UPDATE)
	IF (NEW.NOME IS NOT NULL AND OLD.NOME IS NOT NULL) THEN --TG_OP = 'UPDATE'
		INSERT INTO TENTOU_ALTERAR(BANCO,USUARIO,OPERACAO) VALUES (NEW.NOME, CURRENT_USER,'U');
		RAISE NOTICE 'LOG DE UPDATE GRAVADO.';
		RETURN NEW;
	END IF;
	-- VERIFICA SE FOI FEITA ALGUMA INSERÇÃO
	IF (NEW.NOME IS NOT NULL AND OLD.NOME ISNULL) THEN --TG_OP = 'INSERT'
		INSERT INTO TENTOU_ALTERAR(BANCO,USUARIO,OPERACAO) VALUES (NEW.NOME, CURRENT_USER,'I'); 	
		RAISE NOTICE 'LOG DE INSERT GRAVADO.';
		RETURN NEW;
	END IF;
	--VERIFICA SE FOI FEITA ALGUMA DELEÇÃO
	IF (NEW.NOME ISNULL AND OLD.NOME IS NOT NULL) THEN --TG_OP = 'DELETE'
		INSERT INTO TENTOU_ALTERAR(BANCO,USUARIO,OPERACAO) VALUES (OLD.NOME, CURRENT_USER,'D'); 	
		RAISE NOTICE 'LOG DE DELETE GRAVADO';
		RETURN OLD;
	END IF;
END;
$LOG_ALTERAINSERE_BANCOS$ LANGUAGE plpgsql;

CREATE TRIGGER TG_PERMITE_UF BEFORE INSERT OR UPDATE OR DELETE ON BANCOS
FOR EACH ROW EXECUTE PROCEDURE LOG_ALTERAINSERE_BANCOS();

-- TESTANDO O FUNCIONAMENTO DA TRIGGER COM INSERT
INSERT INTO BANCOS (NOME,RUA,NUMERO,BAIRRO, COMPLEMENTO,CODCIDADE)
VALUES ('TESTE TRIGGER','TESTE TRIGGER', 'TESTE', 'TESTE TRIGGER','TESTE',1);

-- TESTANDO O FUNCIONAMENTO DA TRIGGER COM UPDATE
UPDATE BANCOS SET NOME = 'TESTE TRIGGER' WHERE CODBANCO = 1

--TESTANDO O FUNCIONAMENTO DA TRIGGER COM DELETE
DELETE FROM BANCOS WHERE CODBANCO = 15

-- VERIFICANDO O QUE FOI INSERIDO NA TABELA DE LOG
SELECT * FROM TENTOU_ALTERAR

SELECT * FROM BANCOS

-- EXEMPLO 5
--Crie uma TRIGGER calcule (DATA ATUAL MAIS 3 DIAS) e insira a data de devolução prevista na tabela EMP_DEV 
--sempre que um DVD for emprestado
CREATE TABLE EMP_DEV
(
	COD_EMP_DEV SERIAL CONSTRAINT PK_EMP_DEV PRIMARY KEY,
	TITULO VARCHAR(100) NOT NULL,
	DATA_EMP TIMESTAMP  NOT NULL,
	DATA_DEV_PREV TIMESTAMP  NOT NULL,
	DATA_DEV TIMESTAMP
);

-- CRIAÇÃO DA TRIGGER
CREATE OR REPLACE FUNCTION CALCULA_DATA_DEV_PREV() RETURNS TRIGGER AS $CALCULA_DATA_DEV_PREV$
BEGIN
      NEW.DATA_DEV_PREV :=  NEW.DATA_EMP + INTERVAL '3 DAY';
	  RETURN NEW;
END;
$CALCULA_DATA_DEV_PREV$ LANGUAGE plpgsql;

CREATE TRIGGER TG_CALCULA_DATA_DEV_PREV BEFORE INSERT ON EMP_DEV
FOR EACH ROW EXECUTE PROCEDURE CALCULA_DATA_DEV_PREV();

-- TESTANDO A TRIGGER
INSERT INTO EMP_DEV(TITULO, DATA_EMP,DATA_DEV_PREV,DATA_DEV)
VALUES ('TESTE TRIGGER', CURRENT_DATE,CURRENT_DATE,NULL);

-- VERIFICANDO O FUNCIONAMENTO DA TRIGGER

SELECT * FROM EMP_DEV

-- DROPPANDO UMA TRIGGER
DROP TRIGGER TG_CALCULA_DATA_DEV_PREV ON EMP_DEV 